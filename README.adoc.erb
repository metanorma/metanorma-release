= Metanorma Release repository

<%= do_not_edit_generated_file %>

WARNING: This repository is for INTERNAL USE ONLY.

== Metanorma gems

(in dependency order)

<% for name in %w[relaton-render] %>
<%= github_link "relaton", name %> <%= shield_gem name %>::
<%= shield_gha_rake "relaton", name %>
<%= shield_gha_latest_release "relaton", name %>
<%= shield_gha_release "relaton", name %>
<%= shield_code_climate "relaton", name %>
<%= shield_pull_requests "relaton", name %>
<%= shield_commits_since "relaton", name %>
<% end %>

<% for name in %w[metanorma-utils isodoc-i18n mn-requirements html2doc isodoc metanorma metanorma-standoc metanorma-iso metanorma-generic metanorma-ietf metanorma-ieee metanorma-itu metanorma-nist metanorma-ogc metanorma-csa metanorma-cc metanorma-iho metanorma-ribose metanorma-jis metanorma-iec metanorma-bsi metanorma-bipm metanorma-plateau metanorma-cli] %>
<%= github_link "metanorma", name %> <%= shield_gem name %>::
<%= shield_gha_rake "metanorma", name %>
<%= shield_gha_latest_release "metanorma", name %>
<%= shield_gha_release "metanorma", name %>
<% unless is_private name %>
<%= shield_code_climate "metanorma", name %>
<%= shield_pull_requests "metanorma", name %>
<%= shield_commits_since "metanorma", name %>
<% end %>
<% end %>

== Metanorma environments

<% for name in %w[metanorma-docker metanorma-docker-private] %>
<%= github_link "metanorma", name %>::
<%= shield_gha "metanorma", name, "build-push" %>
<%= shield_gha_latest_release "metanorma", name, "build-push" %>
<%= shield_pull_requests "metanorma", name %>
<%= shield_commits_since "metanorma", name %>
<% end %>

<%= github_link "metanorma", "packed-mn" %>::
<%= shield_gha "metanorma", "packed-mn", "macos" %>
<%= shield_gha "metanorma", "packed-mn", "alpine" %>
<%= shield_gha "metanorma", "packed-mn", "ubuntu" %>
<%= shield_gha "metanorma", "packed-mn", "windows" %>
<%= shield_gha_latest_release "metanorma", "packed-mn", "ubuntu" %>
<%= shield_pull_requests "metanorma", "packed-mn" %>
<%= shield_commits_since "metanorma", "packed-mn" %>

<%= github_link "metanorma", "metanorma-snap" %>::
<%= shield_gha "metanorma", "metanorma-snap", "main" %>
<%= shield_gha_latest_release "metanorma", "metanorma-snap", "main" %>
<%= shield_pull_requests "metanorma", "metanorma-snap" %>
<%= shield_commits_since "metanorma", "metanorma-snap" %>

<%= github_link "tamatebako", "aibika" %>::
<%= shield_gha "tamatebako", "aibika", "main" %>
<%= shield_gha_latest_release "tamatebako", "aibika", "build-and-test" %>
<%= shield_pull_requests "tamatebako", "aibika" %>
<%= shield_commits_since "tamatebako", "aibika" %>

<%= github_link "metanorma", "homebrew-metanorma" %>::
<%= shield_gha "metanorma", "homebrew-metanorma", "macos" %>
<%= shield_gha "metanorma", "homebrew-metanorma", "linux" %>
<%= shield_gha_latest_release "metanorma", "homebrew-metanorma", "macos" %>
<%= shield_pull_requests "metanorma", "homebrew-metanorma" %>
<%= shield_commits_since "metanorma", "homebrew-metanorma" %>

<%= github_link "metanorma", "chocolatey-metanorma" %>::
<%= shield_gha "metanorma", "chocolatey-metanorma", "main" %>
<%= shield_gha_latest_release "metanorma", "chocolatey-metanorma", "main" %>
<%= shield_pull_requests "metanorma", "chocolatey-metanorma" %>
<%= shield_commits_since "metanorma", "chocolatey-metanorma" %>

== Metanorma document samples

<% for name in %w[bipm bsi cc csa gb generic iec iec-private ieee ieee-private ietf iho iso itu jcgm jis m3aawg mbxif mpf nist ogc plateau ribose].map { |n| "mn-samples-#{n}" } %>
<%= github_link "metanorma", name %>::
<% unless is_private name %>
<%= shield_gha_generate "metanorma", name %>
<% end %>
<%= shield_gha_docker "metanorma", name %>
<% end %>

== Metanorma document templates

<% for name in %w[cc csd iec ietf iho iso itu nist ogc].map { |n| "mn-templates-#{n}" } %>
<%= github_link "metanorma", name %>::
<%= shield_gha_test "metanorma", name %>
<%= shield_gha_docker "metanorma", name %>
<% end %>

== Utility / Leaf gems

<% for name in %w[iev isoics reverse_adoc coradoc metanorma-plugin-lutaml  metanorma-plugin-glossarist emf2svg-ruby vectory] %>
<%= github_link "metanorma", name %> <%= shield_gem name %>::
<%= shield_gha_rake "metanorma", name %>
<%= shield_gha_latest_release "metanorma", name %>
<%= shield_gha_release "metanorma", name %>
<%= shield_code_climate "metanorma", name %>
<%= shield_pull_requests "metanorma", name %>
<%= shield_commits_since "metanorma", name %>
<% end %>

<% for name in %w[mnconvert-ruby mn2pdf-ruby] %>
<%= github_link "metanorma", name %>::
<%= shield_gha_rake "metanorma", name %>
<%= shield_gha_latest_release "metanorma", name %>
<%= shield_gha_release "metanorma", name %>
<%= shield_pull_requests "metanorma", name %>
<%= shield_commits_since "metanorma", name %>
<% end %>

<% for name in %w[mn2pdf mnconvert] %>
<%= github_link "metanorma", name %> <%= shield_gem name %>::
<%= shield_gha "metanorma", name, "test" %>
<%= shield_gha_latest_release "metanorma", name, "test" %>
<%= shield_gha_release "metanorma", name %>
<%= shield_pull_requests "metanorma", name %>
<%= shield_commits_since "metanorma", name %>
<% end %>

== Plurimath gems

<% for name in %w[plurimath] %>
<%= github_link "plurimath", name %> <%= shield_gem name %>::
<%= shield_gha_rake "plurimath", name %>
<%= shield_gha_latest_release "plurimath", name %>
<%= shield_gha_release "plurimath", name %>
<%= shield_code_climate "plurimath", name %>
<%= shield_pull_requests "plurimath", name %>
<%= shield_commits_since "plurimath", name %>
<% end %>

== Lutaml gems

<% for name in %w[lutaml-model lutaml expressir] %>
<%= github_link "lutaml", name %> <%= shield_gem name %>::
<%= shield_gha_rake "lutaml", name %>
<%= shield_gha_latest_release "lutaml", name %>
<%= shield_gha_release "lutaml", name %>
<%= shield_code_climate "lutaml", name %>
<%= shield_pull_requests "lutaml", name %>
<%= shield_commits_since "lutaml", name %>
<% end %>


== Relaton gems

<% for name in %w[relaton-bipm relaton-ieee relaton-iho relaton-bib relaton-omg relaton-un relaton-w3c relaton-itu relaton-gb relaton-iec relaton-ietf relaton-iso relaton-iso-bib relaton-nist relaton-ogc relaton-iev relaton-calconnect relaton-plateau relaton-ccsds relaton-logger relaton-oasis relaton-ecma relaton-cie relaton-jis relaton-3gpp relaton-etsi relaton-cen relaton-iana relaton-doi relaton-isbn relaton-index relaton-cli relaton] %>
<%= github_link "relaton", name %> <%= shield_gem name %>::
<%= shield_gha_rake "relaton", name %>
<%= shield_gha_latest_release "relaton", name %>
<%= shield_gha_release "relaton", name %>
<%= shield_code_climate "relaton", name %>
<%= shield_pull_requests "relaton", name %>
<%= shield_commits_since "relaton", name %>
<% end %>

== Purpose

Today Metanorma spans over 50 gems. Changes to underlying gems, such as https://github.com/metanorma/metanorma[`metanorma`] can cause many of the downstream gems to need upgrading.

We use the https://github.com/metanorma/lapidist[`lapidist`] gem to synchronize the releases.


== Resources

This repo https://github.com/metanorma/metanorma-release[`metanorma-release`] is used as the main building environment.

It submodules *all* metanorma gems for the release process, and also maintains a gem dependency tree within metanorma (should be easy to automate, or worse to worse manual...).


== Flow

This is really a "`composite-git-flow`" kind of process. Maybe it's called `git gush` or `git cascade`.

The typical scenario is:

. A flavor gem needs enhancing (e.g. ISO)
. `metanorma-iso` forces change on a basic gem, like `isodoc`
. An `isodoc` update means the testing on all downstream gems needs to be updated

This is how the Metanorma release flow will look like.


=== Commands available

[source,sh]
----
$ bundle exec lapidist start
----



=== Updating code and integrated testing

. Go to this `metanorma-release` repository

. Run a script to create feature branches in all gems.

. Do the necessary work in the submodule'd (in this repo) `isodoc` and `metanorma-iso`

. Run a script that performs tests on all the gems at once using the newly created feature branches

.. (alt) if you want Travis to test for you, push the `metanorma-release` repository, and Travis will build for you

. When all the gems pass, run a script to make PRs to every repository. If the feature branch for a gem is empty, the script will ignore it.

. Merge PRs by hand or by script (into main or a release branch)


=== Releasing

. When a release branch is ready (for all gems), run a script to:
.. Bump version of those gems (`VERSION` variable in code)
.. Update the ``Gemfile``s (remove feature branches)
.. Update ``gemspec``s to lock versions

. Issue PRs for those gems to merge their release branches into `main`.

. Merge the release PRs by hand or by script.

Ideally, we want to update the base gems first, then the immediately dependent gems, and so forth to ensure that the builds always pass.

